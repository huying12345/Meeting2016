
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的DocInformationViewDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Doc.Entity;

namespace Yamon.Module.Doc.DAL
{
    /// <summary>
    /// 公文视图实体类
    ///</summary>
    public partial class _DocInformationViewDAL : BaseModelDAL<DocInformationView>
    {
        public _DocInformationViewDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 类型（CatalogID）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_CatalogID
		{
			get
			{
			    Yamon.Module.Doc.DAL.DocCatalogDAL dal = new Yamon.Module.Doc.DAL.DocCatalogDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_DocCatalog";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("CatalogID,CatalogName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}
		/// <summary>
        /// 信息类型（InfoType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_InfoType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("1", "文档");
                nv.Add("2", "文章");
                return nv;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<DocInformationView> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="CatalogID,InfoID,Title,InfoNo,CreateTime,CreateUserID,InfoType";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="CatalogID,InfoID,Title,InfoNo,CreateTime,CreateUserID,InfoType";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			
			
			//CatalogID
			if (!("," + notIn.ToLower() + ",").Contains(",catalogid,"))
			{
				value = RequestHelper.GetString("CatalogID");
				if (!string.IsNullOrEmpty(value))
				{
				 sb.Append(" AND [`CatalogID`]=?");
				  param.Add(value);
				}
			}
			
			
			//InfoNo
			if (!("," + notIn.ToLower() + ",").Contains(",infono,"))
			{
			value = RequestHelper.GetString("InfoNo");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`InfoNo`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`InfoNo`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//Title
			if (!("," + notIn.ToLower() + ",").Contains(",title,"))
			{
			value = RequestHelper.GetString("Title");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`Title`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`Title`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//HtmlContent
			if (!("," + notIn.ToLower() + ",").Contains(",htmlcontent,"))
			{
			value = RequestHelper.GetString("HtmlContent");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			              sb.Append(" AND CONTAINS(*,?)");
			              param.Add(arrValue[i]);
			        }
			    }
			    else
			    {
			         sb.Append(" AND CONTAINS(*,?)");
			         param.Add(value);
			    }
			}
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual DocInformationView GetModelValue(DocInformationView model)
        {
            return model;
        }
		/// <summary>
        /// 设置公文视图实体(DocInformationView)的显示值
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        /// <returns>公文视图实体(DocInformationView)</returns>
		public virtual DocInformationView GetModelShowValue(DocInformationView model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.CatalogID!=null)
			{
				model.CatalogID_ShowValue=NameValue_CatalogID.Get(model.CatalogID.ToString());
			}
			if (model.InfoType!=null)
			{
				model.InfoType_ShowValue=NameValue_InfoType.Get(model.InfoType.ToString());
			}
			if(clearValue)
			{
				model.CatalogID = null;
				model.CreateUserID = null;
				model.UpdateUserID = null;
				model.InfoType = null;
				model.FileList = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置公文视图实体(DocInformationView)的列表显示值
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        /// <returns>公文视图实体(DocInformationView)</returns>
		public virtual DocInformationView GetModelGridShowValue(DocInformationView model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual DocInformationView GetInfoByID(object id){
            DocInformationView model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时公文视图实体(DocInformationView)默认值
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        /// <returns>公文视图实体(DocInformationView)</returns>
		public virtual DocInformationView GetInsertModelValue(DocInformationView model)
		{
			model.InfoID =null;
			model.CreateTime =(DateTime.Now);
			model.CreateUserID =(CookieHelper.GetCookieInt("UserID"));
			model.UpdateUserID =(CookieHelper.GetCookieInt("UserID"));
			model.UpdateTime =(DateTime.Now);
			return model;
		}		/// <summary>
        /// 设置新建页面的公文视图实体(DocInformationView)默认值
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        /// <returns>公文视图实体(DocInformationView)</returns>
		public virtual DocInformationView GetCreateFormDefaultValue()
		{
            DocInformationView model = new DocInformationView();
			model.InfoType="1";
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        public virtual void CreateFormValidator(DocInformationView model)
        {
			string value="";
			
			//InfoType验证
			value = model.InfoType!=null ? model.InfoType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("信息类型不能为空！");
		            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时公文视图实体(DocInformationView)默认值
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        /// <returns>公文视图实体(DocInformationView)</returns>
		public virtual DocInformationView GetUpdateModelValue(DocInformationView model)
		{
			model.CreateTime =null;
			model.CreateUserID =null;
			model.UpdateUserID = (CookieHelper.GetCookieInt("UserID"));
			model.UpdateTime = (DateTime.Now);
			model.Status =null;
			return model;
		}		/// <summary>
        /// 设置编辑页面的公文视图实体(DocInformationView)默认值
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        /// <returns>公文视图实体(DocInformationView)</returns>
		public virtual DocInformationView GetEditFormDefaultValue(DocInformationView model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">公文视图实体(DocInformationView)</param>
        public virtual void EditFormValidator(DocInformationView model)
        {
			string value="";
			
			//InfoType验证
			value = model.InfoType!=null ? model.InfoType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("信息类型不能为空！");
		            }
}
      #endregion

    }
}
