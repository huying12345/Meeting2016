
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的DocCatalogDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Doc.Entity;

namespace Yamon.Module.Doc.DAL
{
    /// <summary>
    /// 公文类型实体类
    ///</summary>
    public partial class _DocCatalogDAL : BaseModelDAL<DocCatalog>
    {
        public _DocCatalogDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 上级类型（ParentID）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_ParentID
		{
			get
			{
			    Yamon.Module.Doc.DAL.DocCatalogDAL dal = new Yamon.Module.Doc.DAL.DocCatalogDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_DocCatalog";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("CatalogID,CatalogName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<DocCatalog> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="CatalogID,ParentID,CatalogName,OrderID,Remark";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="CatalogID,ParentID,CatalogName,OrderID,Remark";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual DocCatalog GetModelValue(DocCatalog model)
        {
            return model;
        }
		/// <summary>
        /// 设置公文类型实体(DocCatalog)的显示值
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        /// <returns>公文类型实体(DocCatalog)</returns>
		public virtual DocCatalog GetModelShowValue(DocCatalog model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.ParentID!=null)
			{
				model.ParentID_ShowValue=NameValue_ParentID.Get(model.ParentID.ToString());
			}
			if(clearValue)
			{
				model.ParentID = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置公文类型实体(DocCatalog)的列表显示值
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        /// <returns>公文类型实体(DocCatalog)</returns>
		public virtual DocCatalog GetModelGridShowValue(DocCatalog model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual DocCatalog GetInfoByID(object id){
            DocCatalog model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时公文类型实体(DocCatalog)默认值
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        /// <returns>公文类型实体(DocCatalog)</returns>
		public virtual DocCatalog GetInsertModelValue(DocCatalog model)
		{
			model.CatalogID =null;
			return model;
		}		/// <summary>
        /// 设置新建页面的公文类型实体(DocCatalog)默认值
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        /// <returns>公文类型实体(DocCatalog)</returns>
		public virtual DocCatalog GetCreateFormDefaultValue()
		{
            DocCatalog model = new DocCatalog();
			model.OrderID=0;
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        public virtual void CreateFormValidator(DocCatalog model)
        {
			string value="";
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时公文类型实体(DocCatalog)默认值
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        /// <returns>公文类型实体(DocCatalog)</returns>
		public virtual DocCatalog GetUpdateModelValue(DocCatalog model)
		{
			return model;
		}		/// <summary>
        /// 设置编辑页面的公文类型实体(DocCatalog)默认值
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        /// <returns>公文类型实体(DocCatalog)</returns>
		public virtual DocCatalog GetEditFormDefaultValue(DocCatalog model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">公文类型实体(DocCatalog)</param>
        public virtual void EditFormValidator(DocCatalog model)
        {
			string value="";
}
      #endregion



        /// <summary>
        /// 获取异步树公文类型实体(DocCatalog)列表
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>公文类型实体(DocCatalog)列表</returns>
		public virtual List<DocCatalog> GetAsyncModelTreeList(object parentId,string fields="")
		{
			return GetAsyncTreeList(parentId, fields).ToObjectList<DocCatalog>();
			
		}
		
		
        /// <summary>
        /// 获取异步树列表(DataTable)
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>DataTable</returns>
		public virtual DataTable GetAsyncTreeList(object parentId,string fields="")
		{
			if (string.IsNullOrEmpty(fields))
			{
				fields = AllFields;
			}
			object[] parentParam = new object[] { parentId,parentId };
			string sql = @"select {0},ChildCount from Doc_Catalog as a left join
			(select ParentID as __ParentID,count(1) as ChildCount from Doc_Catalog where ParentID in(
			SELECT  CatalogID  FROM Doc_Catalog where  ParentID=?) group by ParentID) as b
			on a.CatalogID=b.__ParentID where  a.ParentID=?";
			sql = string.Format(sql, fields);
			return Db.ExecuteDataTableSqlEx(sql, parentParam);
		}
        /// <summary>
        /// 更新为树级实体列表
        /// </summary>
        /// <param name="list">实体列表</param>
        /// <returns>树级实体列表</returns>
		public List<DocCatalog> ModelListToTree(List<DocCatalog> list)
		{
			//查找父节点
			List<DocCatalog> rootType = list.Where(o => o.ParentID == 0).OrderBy(o => o.OrderID ).ToList();
			//递归主函数
			Action<DocCatalog> addChild = null;
			addChild = (info =>
				{
					var childInfo = list.Where(o => o.ParentID == info.CatalogID).OrderBy(o => o.OrderID );
					if (childInfo.Count() == 0)
						return;
					childInfo.All(o =>
					{
						if (info.Children == null)
						{
							info.Children=new List<DocCatalog>();
						}
						info.Children.Add(o);
						addChild(o);
						return true;
					});
				});
			//递归调用
			rootType.ForEach(o => { addChild(o); });
			return rootType;
		}
		
		// <summary>
        /// 获取树级实体列表
        /// </summary>
        /// <returns>树级实体列表</returns>
        public List<DocCatalog> GetModelTreeList()
        {
            List<DocCatalog> list = GetAllEntityList();
            return ModelListToTree(list);
        }

        /// <summary>
        /// 保存编辑树
        /// </summary>
        /// <param name="id"></param>
        /// <param name="targetId"></param>
        /// <param name="point"></param>
        /// <returns></returns>
        public int SaveEditTree(int id, string targetId, string point)
        {
            DocCatalog targetModel = GetModelByID(targetId);
            int parentId=0;
            int orderId = 0;
            if (point == "append")
            {
                parentId = targetModel.CatalogID ?? 0;
                orderId = 1;
            }
            else if (point == "top")
            {
                parentId = targetModel.ParentID ?? 0;
                orderId = DataConverter.ToInt(targetModel.OrderID) - 1;
            }
            else if (point == "bottom")
            {
                parentId = targetModel.ParentID ?? 0;
                orderId = DataConverter.ToInt(targetModel.OrderID) + 1;
            }
            DocCatalog model=new DocCatalog();
            model.CatalogID = id;
            model.OrderID = orderId;
            model.ParentID = parentId;
            return UpdateByModel(model);
        }    }
}
